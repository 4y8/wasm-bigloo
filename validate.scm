(module validate
   (include "read-table.sch")
   (main main))

(define (idx? x)
   (or (and (symbol? x) (equal? #\$ (string-ref (symbol->string x) 0)))
       (number? x)))

;; deftypes (rec subtypes*).i are represented as (deftype . (subtypes* . i))
(define (deftype? t)
   (and (pair? t) (equal? 'deftype (car t))))

(define (deftype-head t)
   (match-case (list-ref (cadr t) (cddr t))
      ((or (sub final ?- (?hd . ?-))
           (sub final (?hd . ?-))
           (sub ?- (?hd . ?-))
           (sub (?hd . ?-)))
       hd)
      (else
       (error "deftype-head" "internal error, unexpected deftype form" t))))

(define (<t= env t1 t2)
   (cond ((equal? t1 t2) #t)
         ((idx? t1) (<t= env (get-type env t1) t2))
         ((idx? t2) (<t= env t1 (get-type env t2)))
         ((equal? t2 'any) (<t= env t1 'eq))
         ((equal? t2 'eq)
          (or (equal? t1 'i31)
              (equal? t1 'struct)
              (equal? t1 'array)
              (and (deftype? t1) (<t= env (deftype-head t1) 'eq))))
         ((and (deftype? t1) (symbol? t2))
          (equal? (deftype-head t1) t2))
         ((equal? 'none t1) (<t= env t2 'any))
         ((equal? 'nofunc t1) (<t= env t2 'func))
         ((equal? 'noextern t1) (<t= env t2 'extern))))

(define (main argv)
   (display argv))
